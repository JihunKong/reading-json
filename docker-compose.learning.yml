version: '3.8'

services:
  # Main web interface for learning
  web-learning:
    build:
      context: .
      dockerfile: Dockerfile.learning
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
    container_name: korean-reading-web
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/reading_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./generator/out:/app/generator/out:ro
      - ./reports:/app/reports
      - ./logs:/app/logs
      - sessions_data:/app/sessions
    networks:
      - learning-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL database for session data
  postgres:
    image: postgres:15-alpine
    container_name: korean-reading-db
    environment:
      - POSTGRES_DB=reading_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - learning-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: korean-reading-cache
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - learning-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Analytics service
  analytics:
    build:
      context: .
      dockerfile: Dockerfile.learning
    container_name: korean-reading-analytics
    command: python analytics.py --mode server
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/reading_db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./generator/out:/app/generator/out:ro
      - ./reports:/app/reports
      - analytics_data:/app/analytics_data
    networks:
      - learning-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # CLI study system (for testing/debugging)
  study-cli:
    build:
      context: .
      dockerfile: Dockerfile.learning
    container_name: korean-reading-cli
    command: python study_system.py
    environment:
      - TERM=xterm-256color
    volumes:
      - ./generator/out:/app/generator/out:ro
      - study_data:/app/study_data
    networks:
      - learning-network
    stdin_open: true
    tty: true
    profiles:
      - cli

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: korean-reading-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - static_files:/usr/share/nginx/html/static
    networks:
      - learning-network
    depends_on:
      - web-learning
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: korean-reading-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - learning-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: korean-reading-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - learning-network
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  learning-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  sessions_data:
    driver: local
  analytics_data:
    driver: local
  study_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
  static_files:
    driver: local