# Complete Docker Deployment for Korean Learning System
# Supports both local development and production deployment
# Usage: docker-compose -f docker-compose-complete.yml up

# Note: version field is obsolete in Compose v2, omitted for modern compatibility

services:
  # Main Flask Application - Korean Learning System
  korean-learning-app:
    build:
      context: .
      dockerfile: Dockerfile.flask
      target: ${BUILD_TARGET:-production}
    container_name: korean-learning-main
    restart: unless-stopped
    ports:
      - "${FLASK_PORT:-8080}:8080"
    environment:
      # Flask Configuration
      FLASK_APP: app.main
      FLASK_ENV: ${FLASK_ENV:-production}
      SECRET_KEY: ${SECRET_KEY:-change-this-in-production}
      
      # Korean Locale
      LANG: ko_KR.UTF-8
      LANGUAGE: ko_KR:ko
      LC_ALL: ko_KR.UTF-8
      
      # Database
      DATABASE_URL: ${DATABASE_URL:-sqlite:///./data/korean_learning.db}
      
      # API Keys (optional)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      UPSTAGE_API_KEY: ${UPSTAGE_API_KEY:-}
      
      # Korean NLP Settings
      KONLPY_BACKEND: mecab
      DEFAULT_SIMILARITY_THRESHOLD: 0.68
      
      # Performance
      PYTHONUNBUFFERED: 1
      WORKERS: ${WORKERS:-4}
    
    volumes:
      # Persistent data storage
      - ./data:/app/data:rw
      - ./generator:/app/generator:ro
      - ./core:/app/core:ro
      - ./app:/app/app:ro
      
      # Logs and reports
      - korean_logs:/app/logs:rw
      - korean_reports:/app/reports:rw
      - korean_sessions:/app/sessions:rw
      - korean_exports:/app/exports:rw
    
    networks:
      - korean-learning-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    depends_on:
      - database
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.korean-learning.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.korean-learning.tls=true"
      - "traefik.http.services.korean-learning.loadbalancer.server.port=8080"

  # Database Service (PostgreSQL for production, SQLite for development)
  database:
    image: postgres:15-alpine
    container_name: korean-learning-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-korean_learning}
      POSTGRES_USER: ${DB_USER:-korean_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-korean_pass_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=ko_KR.UTF-8"
    
    volumes:
      - korean_db_data:/var/lib/postgresql/data:rw
      - ./database_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    
    networks:
      - korean-learning-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-korean_user} -d ${DB_NAME:-korean_learning}"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    # Only expose port in development
    ports:
      - "${DB_PORT:-5432}:5432"

  # Redis Cache (Optional - for session storage and caching)
  cache:
    image: redis:7-alpine
    container_name: korean-learning-cache
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_korean_2024}
    
    volumes:
      - korean_cache_data:/data:rw
    
    networks:
      - korean-learning-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: korean-learning-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_cache:/var/cache/nginx:rw
      - nginx_logs:/var/log/nginx:rw
      
      # SSL certificates (if using HTTPS)
      - ${SSL_CERT_PATH:-./ssl/cert.pem}:/etc/ssl/certs/korean-learning.crt:ro
      - ${SSL_KEY_PATH:-./ssl/key.pem}:/etc/ssl/private/korean-learning.key:ro
    
    networks:
      - korean-learning-network
    
    depends_on:
      - korean-learning-app
    
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Content Generator Service (Optional - for generating new tasks)
  generator:
    build: ./generator
    container_name: korean-learning-generator
    restart: "no"  # Run on-demand only
    
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      UPSTAGE_API_KEY: ${UPSTAGE_API_KEY:-}
      LANG: ko_KR.UTF-8
    
    volumes:
      - ./generator:/app:rw
      - ./data/enhanced_tasks:/app/out:rw
    
    networks:
      - korean-learning-network
    
    command: ["python", "cli.py", "--help"]

  # Analytics and Monitoring (Optional)
  monitoring:
    image: prom/prometheus:latest
    container_name: korean-learning-monitoring
    restart: unless-stopped
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus:rw
    
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    networks:
      - korean-learning-network
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

# Network Configuration
networks:
  korean-learning-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Persistent Volumes
volumes:
  # Database storage
  korean_db_data:
    driver: local
  
  # Cache storage
  korean_cache_data:
    driver: local
  
  # Application data
  korean_logs:
    driver: local
  korean_reports:
    driver: local
  korean_sessions:
    driver: local
  korean_exports:
    driver: local
  
  # Nginx data
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local
  
  # Monitoring data
  prometheus_data:
    driver: local

# Secrets (for production deployment)
secrets:
  db_password:
    external: true
  api_keys:
    external: true
  ssl_cert:
    external: true