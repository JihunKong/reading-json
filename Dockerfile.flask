# Multi-stage build for Korean Learning System Flask Application
# Optimized for Korean NLP processing and production deployment

FROM python:3.11-slim as base

# Set environment variables for Korean locale support
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV LANG=ko_KR.UTF-8
ENV LANGUAGE=ko_KR:ko
ENV LC_ALL=ko_KR.UTF-8

# Install system dependencies for Korean NLP and fonts
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Korean locale support
    locales \
    # Korean fonts
    fonts-nanum \
    fonts-nanum-coding \
    fonts-nanum-extra \
    # Build dependencies
    gcc \
    g++ \
    make \
    pkg-config \
    # Java for KoNLPy/Mecab
    openjdk-11-jdk-headless \
    # Additional utilities
    curl \
    git \
    # Clean up
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Configure Korean locale
RUN echo "ko_KR.UTF-8 UTF-8" >> /etc/locale.gen \
    && locale-gen ko_KR.UTF-8 \
    && update-locale LANG=ko_KR.UTF-8

# Set Java environment for KoNLPy
ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64

# Create application user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt /app/
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Install Python dependencies with optimizations
RUN pip install --no-cache-dir -r requirements.txt

# Development stage
FROM base as development
ENV FLASK_ENV=development
ENV FLASK_DEBUG=1

# Production stage
FROM base as production

# Copy application code
COPY --chown=appuser:appuser . /app/

# Create necessary directories with proper permissions
RUN mkdir -p /app/data /app/logs /app/reports /app/sessions /app/exports \
    && chown -R appuser:appuser /app

# Install production server
RUN pip install --no-cache-dir gunicorn gevent

# Switch to non-root user
USER appuser

# Health check endpoint
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/api/status || exit 1

# Expose port 8080 (standard web service port)
EXPOSE 8080

# Production startup command
CMD ["gunicorn", "--bind", "0.0.0.0:8080", "--workers", "4", "--worker-class", "gevent", "--worker-connections", "1000", "--timeout", "120", "--keep-alive", "2", "--max-requests", "1000", "--max-requests-jitter", "100", "--access-logfile", "/app/logs/access.log", "--error-logfile", "/app/logs/error.log", "--log-level", "info", "app.main:app"]

# Labels for container metadata
LABEL maintainer="Korean Learning System"
LABEL version="1.0"
LABEL description="Flask application for Korean reading comprehension learning system"
LABEL org.opencontainers.image.source="Korean Learning System"