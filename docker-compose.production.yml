# Production Docker Compose Configuration
# Korean Reading Comprehension System - Optimized for Production

version: '3.8'

services:
  # =====================================
  # Application Services
  # =====================================
  
  # Main Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
      args:
        - APP_USER=app
        - APP_UID=1001
        - APP_GID=1001
    image: korean-reading-system:production
    container_name: korean-reading-web
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - FLASK_ENV=production
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
    secrets:
      - db_password
      - redis_password
      - jwt_secret
      - session_secret
    volumes:
      - app_logs:/app/logs:rw
      - app_data:/app/data:rw
      - static_files:/app/static:rw
    ports:
      - "127.0.0.1:5000:8000"  # Only bind to localhost
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    networks:
      - backend
      - frontend
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
        labels: "service=web,environment=production"

  # Student API Service
  student-api:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    image: korean-reading-system:production
    container_name: korean-reading-student-api
    restart: unless-stopped
    command: ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "--worker-class", "uvicorn.workers.UvicornWorker", "api_endpoints:app"]
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
    secrets:
      - db_password
      - redis_password
      - jwt_secret
    volumes:
      - app_logs:/app/logs:rw
      - app_data:/app/data:ro
    ports:
      - "127.0.0.1:8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 256M
          cpus: '0.15'
    networks:
      - backend
      - frontend
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Admin API Service  
  admin-api:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    image: korean-reading-system:production
    container_name: korean-reading-admin-api
    restart: unless-stopped
    command: ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "2", "--worker-class", "uvicorn.workers.UvicornWorker", "api_endpoints:app"]
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
    secrets:
      - db_password
      - redis_password
      - jwt_secret
    volumes:
      - app_logs:/app/logs:rw
      - app_data:/app/data:rw
    ports:
      - "127.0.0.1:8002:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 256M
          cpus: '0.15'
    networks:
      - backend
      - frontend
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Background Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    image: korean-reading-system:production
    container_name: korean-reading-worker
    restart: unless-stopped
    command: ["celery", "-A", "tasks", "worker", "--loglevel=info", "--concurrency=4", "--max-tasks-per-child=1000"]
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
    secrets:
      - db_password
      - redis_password
      - rabbitmq_password
    volumes:
      - app_logs:/app/logs:rw
      - app_data:/app/data:rw
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # =====================================
  # Infrastructure Services
  # =====================================

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: korean-reading-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=ko_KR.UTF-8
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
      - postgres_backups:/backups:rw
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    command: |
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=error
      -c log_min_duration_statement=1000
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: korean-reading-redis
    restart: unless-stopped
    command: |
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data:/data:rw
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'
        reservations:
          memory: 256M
          cpus: '0.1'
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "3"

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: korean-reading-rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS_FILE=/run/secrets/rabbitmq_password
      - RABBITMQ_VM_MEMORY_HIGH_WATERMARK=0.8
      - RABBITMQ_DISK_FREE_LIMIT=2GB
    secrets:
      - rabbitmq_password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq:rw
    ports:
      - "127.0.0.1:15672:15672"  # Management UI - localhost only
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'
        reservations:
          memory: 256M
          cpus: '0.1'
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: korean-reading-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - static_files:/usr/share/nginx/html/static:ro
      - nginx_cache:/var/cache/nginx:rw
      - nginx_logs:/var/log/nginx:rw
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - student-api
      - admin-api
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'
    networks:
      - frontend
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # =====================================
  # Monitoring Services
  # =====================================

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: korean-reading-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus:rw
    ports:
      - "127.0.0.1:9090:9090"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'
        reservations:
          memory: 256M
          cpus: '0.1'
    networks:
      - monitoring
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "3"

# =====================================
# Networks
# =====================================
networks:
  frontend:
    driver: bridge
    name: korean-reading-frontend
  backend:
    driver: bridge
    name: korean-reading-backend
    internal: true  # No external access
  monitoring:
    driver: bridge
    name: korean-reading-monitoring
    internal: true

# =====================================
# Volumes
# =====================================
volumes:
  # Application data
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/korean-reading-system
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/korean-reading-system
  static_files:
    driver: local

  # Database
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /backups/postgres

  # Cache
  redis_data:
    driver: local

  # Message Queue
  rabbitmq_data:
    driver: local

  # Web Server
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/nginx

  # Monitoring
  prometheus_data:
    driver: local

# =====================================
# Secrets
# =====================================
secrets:
  db_password:
    external: true
  redis_password:
    external: true
  rabbitmq_password:
    external: true
  jwt_secret:
    external: true
  session_secret:
    external: true